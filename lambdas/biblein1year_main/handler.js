#!/usr/bin/env node

/*
Data:
- readings by month/year
- book abbreviations map
- pictures (autogenerated) + backup pictures
- selected verses?

Process:
- Get today's date
- Get last posted date
- to_post <= every reading between last posted date and today
- for in to_post:
  - format verse using abbreviations, or fallback to original
  - get image from pictures cache, or fail gracefully
  - get selected verses, or use the first verse
  - post image, verse, link and text
*/

const redis = require("redis");

const config = require("./config.json");
const tools = require("./tools");

async function getRelevantDates(today) {
    const redisClient = redis.createClient(config.redis_url);
    try {
        var lastUpdated = new Date(
            await tools._p(cb => redisClient.get("last_updated_date", cb))
        );
    } finally {
        redisClient.quit();
    }
    const day = (1000 * 3600 * 24);
    let now = today.getTime();
    return (function*() {
        for (let nextDay = lastUpdated.getTime() + day; nextDay <= now; nextDay += day) {
            yield new Date(nextDay);
        }
    })();
}

async function getReadingsForDate(date) {
    var params = {
        Key: tools.marshalItem({
            month: (date.getMonth() + 1),
            day: date.getDate(),
        }),
        TableName: "readings",
    };
    var result = await tools.dynamodb.getItem(params).promise();
    if (!result.Item) {
        return [];
    }
    return tools.unmarshalItem(result.Item).data.map((item, i) => {
        if (i === 0) {
            item.hashtag = "#OldTestament";
        } else if (i === 1) {
            item.hashtag = "#NewTestament";
        } else if (i === 2) {
            item.hashtag = "#PsalmsProverbs";
        }
        return item;
    });
}

async function doInstaPost(item) {
    let longRef = await tools.elongateReference(item.ref);
    if ("image_url" in item) {
        var image = item.image_url;
    } else {
        throw new Error(`No image found for ref ${longRef}`);
    }
    let hashtags = [
        "#Bible",
        "#BibleInOneYear",
        "#BiOY",
        "#DailyBibleReading",
    ];
    if ("hashtag" in item) {
        hashtags.unshift(item.hashtag);
    }
    let url = tools.getUrl(item.ref);
    let message = [
        longRef,
        url,
        hashtags.join(" "),
    ].join("\n");
    console.log(image);
    console.log(message);
    console.log("---");
}

async function handler() {
    var today = new Date("2018-01-05T12:34:56"); // FIXME use today's date
    for (let date of await getRelevantDates(today)) {
        for (let item of await getReadingsForDate(date)) {
            await doInstaPost(item);
        }
    };
}

exports.handler = function(event, context, cb) {
    handler().then(msg => cb(null, msg), err => cb(err));
};

if (!module.parent) {
    var ev = {};
    exports.handler(ev, null, (err, msg) => {
        if (err) {
            console.error(err);
            return;
        }
        console.log(msg);
    });
}
